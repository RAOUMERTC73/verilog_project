// Code your testbench here
// or browse Examples
module alu_tb;
  //Declare ports
  reg [3-1:0] a;
  reg [3-1:0] b;
  reg [4-1:0] sel_op;
  wire [6-1:0] out_result;
  
 // Instantiate ALU module
alu alu_dut (.a(a),
             .b(b),
             .sel_op(sel_op),
             .out_result(out_result));
  
 // alu alu_dut(.*);
  
   //initail block
  initial begin
    // Test case 1: Addition
    a = 4'b0101;
    b = 4'b0011;
    sel_op = 4'b0001;
    #10 $display("a + b = %d", out_result);
    
    // Test case 2: Subtraction
    a = 4'b1101;
    b = 4'b1001;
    sel_op = 4'b0010;
    #10 $display("a - b = %d", out_result);
    
    // Test case 3: Multiplication
    a = 4'b0100;
    b = 4'b0011;
    sel_op = 4'b0011;
    #10 $display("a * b = %d", out_result);
    
    // Test case 4: Division
    a = 4'b1100;
    b = 4'b1001;
    sel_op = 4'b0100;
    #10 $display("a / b = %d", out_result);
    
    // Test case 5: Shift left
    a = 4'b1100;
    b = 4'b0000;
    sel_op = 4'b0101;
    #10 $display("a << 1 = %d", out_result);
    
    // Test case 6: Shift right
    a = 4'b1100;
    b = 4'b0000;
    sel_op = 4'b0110;
    #10 $display("a >> 1 = %d", out_result);
    
    // Test case 7: AND
    a = 4'b1100;
    b = 4'b1010;
    sel_op = 4'b0111;
    #10 $display("a & b = %d", out_result);
    
    // Test case 8: OR
    a = 4'b0101;
    b = 4'b0010;
    sel_op = 4'b1000;
    #10 $display("a | b = %d", out_result);
    
    // Test case 9: XOR
    a = 4'b1100;
    b = 4'b1010;
    sel_op = 4'b1001;
    #10 $display("a ^ b = %d", out_result);
    
    // Test case 10: NOR
    a = 4'b1100;
    b = 4'b1010;
    sel_op = 4'b1010;
    #10 $display("~(a | b) = %d", out_result);
    
    // Test case 11: NAND
    a = 4'b1100;
    b = 4'b1010;
    sel_op = 4'b1011;
    #10 $display("~(a & b) = %d", out_result);
    
    // Test case 12: XNOR
    a = 4'b1100;
    b = 4'b1010;
    sel_op = 4'b1100;
    #10 $display("~(a ^ b) = %d", out_result);
    
    // Test case 13: NOT
    a = 4'b0001;
    b = 4'b1010;
    sel_op = 4'b1101;
    #10 $display("~(b) = %d", out_result);
     // Test case 14: greater then
    a = 4'b1101;
    b = 4'b1000;
    sel_op = 4'b1110;
    #10 $display("(a > b) = %d", out_result);
     // Test case 15: equal then
    a = 4'b1101;
    b = 4'b1000;
    sel_op = 4'b1111;
    #10 $display("(a == b) = %d", out_result);
     
  end
    initial begin 
      $dumpfile("dump.vcd");
      $dumpvars(0);
      #200
      $finish();
    end

    endmodule